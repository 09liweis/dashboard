import '../styles/globals.css';
import Head from 'next/head';
import Link from 'next/link';
import type { AppProps } from 'next/app';
import AppContext from '../AppContext';
import { useState, useRef, useEffect } from 'react';
import { fetchUser, fetchToken, checkUserToken } from '../helpers';

import Chat from '../components/Chat';

const getPageTitle = (pageProps: any) => {
  const pageMeta = pageProps.pageMeta;
  return pageMeta?.title || 'Dashboard';
};

const NAV_LINKS = [
  { tl: 'Home', url: '/', icon: 'fa-solid fa-house-user' },
  { tl: 'Knowledges', url: '/knowledges', icon: 'fa-solid fa-book' },
  { tl: 'Expense', url: '/expense', icon: 'fa-solid fa-piggy-bank' },
  { tl: 'Subscription', url: '/newsletter', icon: 'fa-solid fa-envelope' },
];

interface User {
  _id: string;
  nm: string;
  eml: string;
  lts: string;
}

function MyApp({ Component, pageProps }: AppProps) {
  const emptyUser: User = { _id: '', nm: '', eml: '', lts: '' };
  const [user, setUser] = useState(emptyUser);
  const [showLogin, setShowLogin] = useState(false);

  const usernameInput = useRef<HTMLInputElement>(null);
  const passwordInput = useRef<HTMLInputElement>(null);
  const handleLogin = async (e: React.SyntheticEvent<HTMLFormElement>) => {
    e.preventDefault();
    const body = {
      eml: usernameInput?.current?.value,
      pwd: passwordInput?.current?.value,
    };
    const response = await fetchToken(body);
    if (response.token) {
      localStorage.setItem('auth-token', response.token);
      const userResponse = await fetchUser();
      if (userResponse?.user) {
        setUser(userResponse.user);
      }
    }
  };

  useEffect(() => {
    const userResponse = checkUserToken();
    userResponse.then((res: any) => {
      if (res?.user) {
        setUser(res.user);
      }
    });
  }, []);

  return (
    <>
      <Head>
        <title>{getPageTitle(pageProps)}</title>
        <meta name="keywords" content="" />
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css"
        />
        <link rel="stylesheet" href="/tailwind.css" />
      </Head>
      <AppContext.Provider
        value={{
          user,
          setUser,
        }}
      >
        {/* <Chat /> */}
        <main className="flex">
          <header className="hidden sm:block sm:flex-none p-3">
            <nav className="flex flex-col p-3 bg-card rounded shadow">
              {NAV_LINKS.map((nav) => (
                <Link key={nav.url} href={nav.url}>
                  <span className="mb-3 cursor-pointer text-red-500 hover:text-red-600 transition duration-300">
                    <i className={nav.icon}></i> {nav.tl}
                  </span>
                </Link>
              ))}
              {user._id ? (
                <>
                  <span className="mb-3 text-red-500 hover:text-red-600 transition duration-300">
                    <i className="fa-solid fa-user"></i> {user.nm}
                  </span>
                  <a
                    onClick={() => {
                      localStorage.removeItem('auth-token');
                      setUser(emptyUser);
                    }}
                  >
                    Logout
                  </a>
                </>
              ) : (
                <a onClick={() => setShowLogin(true)}>Login</a>
              )}
            </nav>
          </header>
          <section className="flex-1 p-3">
            <section className="bg-card p-3 rounded">
              <Component {...pageProps} />
            </section>
          </section>
          {!user._id && showLogin ? (
            <section className="fixed bg-black w-full h-full flex justify-center items-center">
              <form
                className="bg-white p-3 mx-auto w-96"
                onSubmit={handleLogin}
              >
                <input
                  ref={usernameInput}
                  className="border w-full p-3 rounded mb-2"
                  placeholder="User Name"
                />
                <input
                  ref={passwordInput}
                  className="border w-full p-3 rounded mb-2"
                  placeholder="Password"
                />
                <button>Login</button>
              </form>
            </section>
          ) : null}
        </main>
      </AppContext.Provider>
    </>
  );
}

export default MyApp;
