import type { NextPage } from 'next'
import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import Highcharts from 'highcharts'
import HighchartsReact from 'highcharts-react-official'
import styles from '../styles/Home.module.css'
import { fetchAPI } from '../helpers'

const EXPANSE_API_DATA:string = 'https://samliweisen.herokuapp.com/api/transactions/statistics';

interface SingleExpense {
  name:string,
  y:number
}

const Expense: NextPage = () => {
  const emptyExpenses:Array<SingleExpense> = [];
  const [expenses,setExpenses] = useState(emptyExpenses);
  const [expenseNm, setExpenseNm] = useState('')
  const [expenseVal, setExpenseVal] = useState(0)
  const getExpenseStatistics = async () => {
    const body = {date:'2022-09'};
    const statistics = await fetchAPI({url:EXPANSE_API_DATA,body});
    let expenses:Array<SingleExpense> = [];
    for (const name in statistics.categoryPrice) {
      const y = Math.abs(statistics.categoryPrice[name]);
      expenses.push({name,y});
    }
    setExpenses(expenses);
  }
  useEffect(()=>{
    getExpenseStatistics();
  },[]);

  const editInput = (e:any,field:string) =>{
    const value = e.target.value;
    if (field == 'nm') {
      setExpenseNm(value);
    }
    if (field == 'val') {
      setExpenseVal(parseFloat(value));
    }
  }
  const addExpense = () =>{
    if (expenseNm.trim() === '') {
      alert('Category can not be empty');
      return;
    }
    if (expenseVal == 0) {
      alert('Expense can not be 0');
      return;
    }
    expenses.push({name:expenseNm,y:expenseVal});
    setExpenses(expenses);
    setExpenseNm('');
    setExpenseVal(0);
  }

  const deleteExpense = (idx:number) => {
    setExpenses(expenses.filter((item,i) => i !== idx));
  }

  const options = {
    chart: {
      type: 'bar',
      animation:{
        duration:50
      }
    },
    xAxis: {
      type:'category'
    },
    yAxis: {
      min: 0,
      title: {
        text: 'Expense amount',
        align: 'high'
      },
      labels: {
        overflow: 'justify'
      }
    },
    title: {
      text: 'My Expense Chart'
    },
    series: [{
      name: 'Expense',
      colorByPoint:true,
      data: expenses
    }]
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Expense</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h2>Expense Page</h2>
      <main>
        {expenses.length?
        <React.Fragment>
          <HighchartsReact
            highcharts={Highcharts}
            options={options}
          />
          <h3>Total: {expenses.reduce((pVal,cVal)=> pVal + cVal.y,0).toFixed(2)}</h3>
          <section className='margin-tb-10'>
            {
              expenses.map((expense,idx)=>{
                return (
                  <article className='border border-radius padding-5 display-flex justify-content-sb margin-b-10' key={expense.name}>
                    <span>{expense.name}: {expense.y.toFixed(2)}</span>
                    <span onClick={()=>deleteExpense(idx)}>Delete</span>
                  </article>
                )
              })
            }
          </section>
        </React.Fragment>
        :<section className='center'>Please add some expenses to show the chart</section>}
        <div className='display-flex'>
          <input className='width-100 margin-b-10 padding-10' id='nm' placeholder='Enter Category' value={expenseNm} onChange={(e)=>editInput(e,'nm')} />
          <input className='width-100 margin-b-10 padding-10' id='val' type='number' value={expenseVal} placeholder='Enter Expense Amount' onChange={(e)=>editInput(e,'val')}/>
          <button className='width-40 margin-b-10 padding-10' onClick={addExpense}>Add</button>
        </div>
      </main>
    </div>
  )
}

export default Expense
